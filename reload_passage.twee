:: StoryTitle
reload_passage


:: StoryData
{
  "ifid": "AA524A6B-B93E-4E56-9196-FC4AA6435563",
  "format": "SugarCube",
  "format-version": "2.36.1",
  "start": "init",
  "zoom": 1
}


:: PassageHeader_off {"position":"800,450","size":"100,100"}
<<silently>>
<<repeat 150ms>>
    <<replace "#refreshArea">>
        <<include "live_variables">>
        <<update>>
    <</replace>>
<</repeat>>
<</silently>>

<div id="refreshArea" style="height: 60vh; overflow-y: auto; display: flex; align-items: flex-start;">
    <!-- This is where the content will be refreshed -->
</div>

<<script>>
$(document).ready(function() {
    // Get the initial height of the container
    var initialHeight = $("#refreshArea").height();

    // Set the height of the container to the initial height
    $("#refreshArea").css("height", initialHeight + "px");
});
<</script>>


:: avatar_1 {"position":"825,575","size":"100,100"}
This is Avatar's first instaction with the world


Stand on the left or right leg? <<live $avatar_movement >>

<<liveblock>>
<<if $avatar_movement == "Standing on the right leg">>
<<goto "avatar_2A">>
<</if>>
<<if $avatar_movement == "Standing on the left leg">>
<<goto "avatar_2B">>
<</if>>
<</liveblock>>



:: avatar_2A {"position":"750,700","size":"100,100"}
This is Avatar 2A

<<liveblock>>
<<if $avatar_movement == "Jumping very high!">>
<<goto "avatar_3A">>
<</if>>
<<if $avatar_movement == "Standing on the left leg">>
<<goto "avatar_3B">>
<</if>>
<</liveblock>>


:: avatar_2B {"position":"875,700","size":"100,100"}
This is Avatar 2B


:: avatar_3A {"position":"750,825","size":"100,100"}
End in 3A


:: avatar_3B {"position":"875,825","size":"100,100"}
End in 3B


:: hachi_1 {"position":"550,575","size":"100,100"}
This is Hachi's first instaction with the world

Stand on the front or back leg? $hachi_movement
<<liveblock>>
<<if $hachi_movement == "Standing on the back leg">>
<<include "hachi_2A">>
<</if>>
<<if $hachi_movement == "Standing on the front leg">>
<<include "hachi_2B">>
<</if>>
<</liveblock>>



:: hachi_2A {"position":"475,700","size":"100,100"}
This is Hachi 2A


:: hachi_2B {"position":"600,700","size":"100,100"}
This is Hachi 2B


:: init {"position":"675,325","size":"100,100"}
<<nobr>><<set _timerRunning = true>><<timed 3s>><<set _timerRunning = false>>
<<set $avatar_checkpoint to avatar_checkpoint>>
<<set $avatar_checkpoint_dist to avatar_checkpoint_dist>>
<<set $avatar_heading to avatar_heading>>
<<set $avatar_latitude to avatar_latitude>>
<<set $avatar_longitude to avatar_longitude>>
<<set $avatar_movement to avatar_movement>>
<<set $avatar_part_dir to avatar_part_dir>>
<<set $avatar_part_mov to avatar_part_mov>>
<<set $avatar_tag to avatar_tag>>

<<set $hachi_checkpoint to hachi_checkpoint>>
<<set $hachi_checkpoint_dist to hachi_checkpoint_dist>>
<<set $hachi_heading to hachi_heading>>
<<set $hachi_latitude to hachi_latitude>>
<<set $hachi_longitude to hachi_longitude>>
<<set $hachi_movement to hachi_movement>>
<<set $hachi_part_dir to hachi_part_dir>>
<<set $hachi_part_mov to hachi_part_mov>>
<<set $hachi_tag to hachi_tag>>

Ok!
<<goto "main">>
<</timed>><<if _timerRunning>>
Loading variables...
<</if>><</nobr>>



:: live_variables {"position":"800,325","size":"100,100"}

<
<<set $avatar_checkpoint to avatar_checkpoint>>
<<set $avatar_checkpoint_dist to avatar_checkpoint_dist>>
<<set $avatar_heading to avatar_heading>>
<<set $avatar_latitude to avatar_latitude>>
<<set $avatar_longitude to avatar_longitude>>
<<set $avatar_movement to avatar_movement>>
<<set $avatar_part_dir to avatar_part_dir>>
<<set $avatar_part_mov to avatar_part_mov>>
<<set $avatar_tag to avatar_tag>>

<<set $hachi_checkpoint to hachi_checkpoint>>
<<set $hachi_checkpoint_dist to hachi_checkpoint_dist>>
<<set $hachi_heading to hachi_heading>>
<<set $hachi_latitude to hachi_latitude>>
<<set $hachi_longitude to hachi_longitude>>
<<set $hachi_movement to hachi_movement>>
<<set $hachi_part_dir to hachi_part_dir>>
<<set $hachi_part_mov to hachi_part_mov>>
<<set $hachi_tag to hachi_tag>>

<<nobr>>
<<set $avatar_variables = []>>
<<set $hachi_variables = []>>
<<set _variables = [
    "avatar_checkpoint", "avatar_checkpoint_dist", "avatar_heading", "avatar_latitude", 
    "avatar_longitude", "avatar_movement", "avatar_part_dir", "avatar_part_mov", "avatar_tag",
    "hachi_checkpoint", "hachi_checkpoint_dist", "hachi_heading", "hachi_latitude", 
    "hachi_longitude", "hachi_movement", "hachi_part_dir", "hachi_part_mov", "hachi_tag"
]>>
<<set _table = "<table border='1'><tr><th>Variable</th><th>Avatar</th><th>Variable</th><th>Hachi</th></tr>" >>

<<for _variable range _variables>>
    <<if _variable.indexOf("avatar") !== -1>>
        <<set $avatar_variables.push({name: _variable, value: window[_variable] || ""})>>
    <<elseif _variable.indexOf("hachi") !== -1>>
        <<set $hachi_variables.push({name: _variable, value: window[_variable] || ""})>>
    <</if>>
<</for>>

<<set _rowCount = Math.max($avatar_variables.length, $hachi_variables.length)>>
<<set _i = 0>>
<<for _i; _i lt _rowCount; _i++>>
    <<set _avatarVar = $avatar_variables[_i] || {name: "", value: ""}>>
    <<set _hachiVar = $hachi_variables[_i] || {name: "", value: ""}>>
    <<set _table += "<tr><td>" + _avatarVar.name + "</td><td>" + _avatarVar.value + "</td><td>" + _hachiVar.name + "</td><td>" + _hachiVar.value + "</td></tr>" >>
<</for>>
<<set _table += "</table>" >>
<<_table>>
<</nobr>>






:: main {"position":"675,450","size":"100,100"}
 <div class="container">
<div class="refreshArea">
<<silently>>
<<repeat 150ms>>
    <<replace "#refreshArea">>
        <<include "live_variables">>
        <<update>>
    <</replace>>
<</repeat>>
<</silently>>

<div id="refreshArea" style="height: 60vh; width:100wh; overflow-y: auto; display: flex; align-items: flex-start;">
    <!-- This is where the content will be refreshed -->
</div>

<<script>>
$(document).ready(function() {
    // Get the initial height of the container
    var initialHeight = $("#refreshArea").height();

    // Set the height of the container to the initial height
    $("#refreshArea").css("height", initialHeight + "px");
});
<</script>>

</div>
</div>
    <div class="bottomContainer">
        <div class="avatar_story">
                <<include "avatar_1">></div>
        <div class="hachi_story">
        <<include "hachi_1">></div>
    </div>



:: StoryScript [script]
(function () {
	"use strict";

	$(document).on(":liveupdate", function () {
		$(".macro-live").trigger(":liveupdateinternal");
	});

	Macro.add(['update', 'upd'], {
		handler: function handler() {
			$(document).trigger(":liveupdate");
		}
	});

	Macro.add(['live', 'l', 'lh'], {
		skipArgs: true,
		handler: function handler() {
			if (this.args.full.length === 0) {
				return this.error('no expression specified');
			}
			try {
				var statement = this.args.full;
				var result = toStringOrDefault(Scripting.evalJavaScript(statement), null);
				if (result !== null) {
					var lh = this.name === "lh";
					var $el = $("<span></span>").addClass("macro-live").wiki(lh ? Util.escape(result) : result).appendTo(this.output);
					$el.on(":liveupdateinternal", this.createShadowWrapper(function (ev) {
						var out = toStringOrDefault(Scripting.evalJavaScript(statement), null);
						$el.empty().wiki(lh ? Util.escape(out) : out);
					}));
				}
			} catch (ex) {
				return this.error("bad evaluation: " + (_typeof(ex) === 'object' ? ex.message : ex));
			}
		}
	});

	Macro.add(['liveblock', 'lb'], {
		tags: null,
		handler: function handler() {
			try {
				var content = this.payload[0].contents.trim();
				if (content) {
					var $el = $("<span></span>").addClass("macro-live macro-live-block").wiki(content).appendTo(this.output);
					$el.on(":liveupdateinternal", this.createShadowWrapper(function (ev) {
						$el.empty().wiki(content);
					}));
				}
			} catch (ex) {
				return this.error("bad evaluation: " + (_typeof(ex) === 'object' ? ex.message : ex));
			}
		}
	});
})();

setup.aScriptImport =importScripts(
  [
    "https://www.gstatic.com/firebasejs/10.9.0/firebase-app-compat.js",
    "https://www.gstatic.com/firebasejs/10.9.0/firebase-database-compat.js"
  ]
);

setup.aScriptImport
  .then(function () {
  console.log('Starting Firebase');
  const firebaseConfig = {
    apiKey: "AIzaSyDWeHUOXcHSp01pLYXY8HQm-l8e7ldqeRA",
    authDomain: "searchingforus.firebaseapp.com",
    databaseURL: "https://searchingforus-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "searchingforus",
    storageBucket: "searchingforus.appspot.com",
    messagingSenderId: "1074186074798",
    appId: "1:1074186074798:web:316b5662099ab3b0e48b3f"
  };

  // Initialize Firebase
  const app =firebase.initializeApp(firebaseConfig);
  const database = firebase.database(app);
  const avatarDatabase = 'avatar_data/';
  const hachiDatabase = 'hachi_data/';

  var avatarRef = firebase.database().ref(avatarDatabase);
  avatarRef.on('value', (snapshot) => {
    const avatarData = snapshot.val();
    // Iterate over each node in the data object
    for (let nodeName in avatarData) {
      // Check if the property is directly on the object (not inherited)
      if (avatarData.hasOwnProperty(nodeName)) {
        // Create variables with the same name as the node and assign the node's value to them
        window[nodeName] = avatarData[nodeName];
        console.log("Created variable:", nodeName, "with value:", window[nodeName]); // Debugging statement

      }
    }
  });

  var hachiRef = firebase.database().ref(hachiDatabase);
  hachiRef.on('value', (snapshot) => {
    const hachiData = snapshot.val();
    // Iterate over each node in the data object
    for (let nodeName in hachiData) {
      // Check if the property is directly on the object (not inherited)
      if (hachiData.hasOwnProperty(nodeName)) {
        // Create variables with the same name as the node and assign the node's value to them
        window[nodeName] = hachiData[nodeName];
        console.log("Created variable:", nodeName, "with value:", window[nodeName]); // Debugging statement

      }
    }
  });
  
  //Last line of the function. KEEP
})



:: StoryStylesheet [stylesheet]

#ui-bar {
	display: none;
}
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
    }

    .container {
        display: flex;
        position: absolute;
        top: 0;
        width: 100%;
        height: 60%;
    }

    .refreshArea {
        width: 100%;
        height: 100%;
        background-color: lightgray; /* Adjust styling as needed */
    }

    .bottomContainer {
        display: flex;
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 40%;
    }

    .avatar_story, .hachi_story {
        width: 50%;
        height: 100%;
    }

    .avatar_story {
        background-color: lightblue; /* Adjust styling as needed */
    }

    .hachi_story {
        background-color: lightgreen; /* Adjust styling as needed */
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        border: 0px solid #ddd;
        text-align: center;
    }

    th {
        background-color: #f2f2f2; /* Header background color */
    }

    tr:nth-child(even) {
        background-color: #f2f2f2; /* Alternate row background color */
    }
